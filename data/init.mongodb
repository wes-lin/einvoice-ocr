use("invoice");

db.user.drop();

db.user.createIndex({ email: 1 }, { unique: true });
db.user.insertMany([
  {
    _id: "65a761e49772db7cb4e186b4",
    email: "Wes_lin@189.cn",
    userName: "Wesl",
    password:
      "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
    createdAt: new Date(),
    lastLoginAt: new Date(),
  },
]);

db.templates.drop();
// db.templates.createIndex({"name":'text'});
db.templates.insertMany([
  {
    name: "默认",
    group: "default",
    multipart: false,
    files: [
      {
        name: "订单",
        keyword: "订单号码",
        type: "order",
        dataMapping: [
          {
            code: "orderDate",
            dataType: "date",
            regExp:
              "下单时间(.*)(?P<orderDate>[0-9]{4}-[0-9]{1,2}-[0-9]{1,2} [0-9]{2}:[0-9]{2}:[0-9]{2})",
          },
          {
            code: "orderMoney",
            dataType: "num",
            regExp: "总计\\s+(?P<orderMoney>[0-9]+.[0-9]+)",
          },
          {
            code: "orderMoney",
            dataType: "num",
            regExp: "合计\\s+(?P<orderMoney>[0-9]+.[0-9]+)",
          },
          {
            code: "orderMoney",
            dataType: "num",
            regExp: "实付款\\s+(?P<orderMoney>[0-9]+.[0-9]+)",
          },
        ],
      },
      {
        name: "发票",
        keyword: "发票代码",
        type: "invoice",
        dataMapping: [
          {
            code: "invoiceDate",
            dataType: "date",
            regExp:
              "开票日期:(?P<invoiceDate>[0-9]{4}年[0-9]{1,2}月[0-9]{1,2}日)",
          },
          {
            code: "invoiceMoney",
            dataType: "num",
            regExp: "（小写）(?P<invoiceMoney>[0-9]+.[0-9]+)",
          },
        ],
      },
    ],
  },
  {
    name: "滴滴",
    group: "didi",
    subject: "滴滴出行",
    multipart: true,
    files: [
      {
        name: "滴滴行程单",
        keyword: "行程单",
        type: "trip",
        dataMapping: [
          {
            code: "tripDate",
            dataType: "date",
            regExp:
              "行程起止日期[^0-9]+(?P<tripDate>[0-9]{4}-[0-9]{1,2}-[0-9]{1,2})",
          },
          {
            code: "filedDate",
            dataType: "date",
            regExp:
              "申请日期[^0-9]+(?P<filedDate>[0-9]{4}-[0-9]{1,2}-[0-9]{1,2})",
          },
          {
            code: "tripMoney",
            dataType: "num",
            regExp: "合计(?P<tripMoney>[0-9]+.[0-9]+)",
          },
        ],
      },
      {
        name: "滴滴发票",
        keyword: "发票代码",
        type: "invoice",
        dataMapping: [
          {
            code: "invoiceDate",
            dataType: "date",
            regExp:
              "开票日期:(?P<invoiceDate>[0-9]{4}年[0-9]{1,2}月[0-9]{1,2}日)",
          },
          {
            code: "invoiceMoney",
            dataType: "num",
            regExp: "（小写）(?P<invoiceMoney>[0-9]+.[0-9]+)",
          },
        ],
      },
    ],
  },
]);

db.user_file_configs.drop();
db.user_file_configs.insertMany([
  {
    userId: "65a761e49772db7cb4e186b4",
    group: "default",
    type: "order",
    vars: [
      {
        code: "orderDate",
        dataType: "date",
        format: "%m%d",
      },
      {
        code: "orderMoney",
        dataType: "num",
      },
    ],
    fileName: "${userName}-${orderDate}-${orderMoney}.${fileExt}",
  },
  {
    userId: "65a761e49772db7cb4e186b4",
    group: "default",
    type: "invoice",
    vars: [
      {
        code: "invoiceDate",
        dataType: "date",
        format: "%m%d",
      },
      {
        code: "invoiceMoney",
        dataType: "num",
      },
    ],
    fileName: "${userName}-${invoiceDate}-${invoiceMoney}.${fileExt}",
  },
  {
    userId: "65a761e49772db7cb4e186b4",
    group: "didi",
    type: "trip",
    vars: [
      {
        code: "tripDate",
        dataType: "date",
        format: "%m%d",
      },
      {
        code: "filedDate",
        dataType: "date",
        format: "%m%d",
      },
      {
        code: "tripMoney",
        dataType: "num",
      },
    ],
    fileName:
      "${userName}-${tripDate}-${tripMoney}滴滴出行行程报销单.${fileExt}",
  },
  {
    userId: "65a761e49772db7cb4e186b4",
    group: "didi",
    type: "invoice",
    vars: [
      {
        code: "tripDate",
        dataType: "date",
        format: "%m%d",
      },
      {
        code: "invoiceDate",
        dataType: "date",
        format: "%m%d",
      },
      {
        code: "invoiceMoney",
        dataType: "num",
      },
    ],
    fileName: "${userName}-${tripDate}-${invoiceMoney}滴滴电子发票.${fileExt}",
  },
]);

// Run a find command to view items sold on April 4th, 2014.
// db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
