use("invoice");

db.user.drop();

db.user.createIndex({ email: 1 }, { unique: true });
db.user.insertMany([
  {
    _id: "65a761e49772db7cb4e186b4",
    email: "Wes_lin@189.cn",
    userName: "Wesl",
    password:
      "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
    createdAt: new Date(),
    lastLoginAt: new Date(),
  },
]);

db.data_mapping.drop();
db.data_mapping.insertMany([
  {
    code: "orderDate",
    regExp: [
      "下单时间(.*)(?P<orderDate>[0-9]{4}-[0-9]{1,2}-[0-9]{1,2} [0-9]{2}:[0-9]{2}:[0-9]{2})",
    ],
  },
  {
    code: "orderMoney",
    regExp: [
      "总计\\s+(?P<orderMoney>([0-9]+|[0-9]{0,})(.[0-9]{1,2}))",
      "合计\\s+(?P<orderMoney>([0-9]+|[0-9]{0,})(.[0-9]{1,2}))",
      "实付款\\s+(?P<orderMoney>([0-9]+|[0-9]{0,})(.[0-9]{1,2}))",
    ],
  },
  {
    code: "invoiceDate",
    regExp: ["开票日期:(?P<invoiceDate>[0-9]{4}年[0-9]{1,2}月[0-9]{1,2}日)"],
  },
  {
    code: "invoiceDate",
    regExp: ["（小写）(?P<invoiceMoney>([0-9]+|[0-9]{0,})(.[0-9]{1,2}))"],
  },
  {
    code: "tripDate",
    regExp: ["行程起止日期[^0-9]+(?P<tripDate>[0-9]{4}-[0-9]{1,2}-[0-9]{1,2})"],
  },
  {
    code: "filedDate",
    regExp: ["申请日期[^0-9]+(?P<filedDate>[0-9]{4}-[0-9]{1,2}-[0-9]{1,2})"],
  },
  {
    code: "tripMoney",
    regExp: ["合计(?P<tripMoney>([0-9]+|[0-9]{0,})(.[0-9]{1,2}))"],
  },
]);

db.user_file.drop();
// db.templates.createIndex({"name":'text'});
db.user_file.insertMany([
  {
    userId: "65a761e49772db7cb4e186b4",
    name: "默认",
    group: "default",
    multipart: false,
    files: [
      {
        name: "订单",
        type: "order",
        vars: [
          {
            label: "订单日期",
            code: "orderDate",
            dataType: "date",
            format: "%m%d",
          },
          {
            label: "订单金额",
            code: "orderMoney",
            dataType: "num",
            format: "%.2f",
          },
        ],
        fileName: "${userName}-${orderDate}-${orderMoney}.${fileExt}",
      },
      {
        name: "发票",
        type: "invoice",
        vars: [
          {
            label: "开票日期",
            code: "invoiceDate",
            dataType: "date",
            format: "%m%d",
          },
          {
            label: "开票金额",
            code: "invoiceMoney",
            dataType: "num",
            format: "%.2f",
          },
        ],
        fileName: "${userName}-${invoiceDate}-${invoiceMoney}.${fileExt}",
      },
    ],
  },
  {
    userId: "65a761e49772db7cb4e186b4",
    name: "滴滴",
    group: "didi",
    multipart: true,
    keyword: "行程单",
    files: [
      {
        name: "滴滴行程单",
        type: "trip",
        vars: [
          {
            label: "行程日期",
            code: "tripDate",
            dataType: "date",
            format: "%m%d",
          },
          {
            label: "订单金额",
            code: "tripMoney",
            dataType: "num",
            format: "%.2f",
          },
        ],
        fileName:
          "${userName}-${tripDate}-${tripMoney}滴滴出行行程报销单.${fileExt}",
      },
      {
        name: "发票",
        type: "invoice",
        vars: [
          {
            label: "开票日期",
            code: "invoiceDate",
            dataType: "date",
            format: "%m%d",
          },
          {
            label: "开票金额",
            code: "invoiceMoney",
            dataType: "num",
            format: "%.2f",
          },
        ],
        fileName:
          "${userName}-${tripDate}-${invoiceMoney}滴滴电子发票.${fileExt}",
      },
    ],
  },
]);

// Run a find command to view items sold on April 4th, 2014.
// db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
